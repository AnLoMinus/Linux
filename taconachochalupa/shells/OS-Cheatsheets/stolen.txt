'Nix Sheet

See Operating System and Version Uname -a Cat /etc/issue Find Open Ports on Machine nmap localhost -sV-oNscan.txt SSH Configuration Check /etc/sshd_config Find / -name “key” >> keysearch.txt Find / -name “key.pub” >> keysearch.txt Check User Accounts /etc/passwd Check Running Services (systemd) systemctl list-unit-files (sysvinit) chkconfig --list Check cronjobs crontab -l For all users for user in $(cut -f1 -d: /etc/passwd); do crontab -u $user -l; done Mysql mysql --user=root mysql -p SELECT User FROM mysql.user; ALTER USER dbadmin@localhost IDENTIFIED BY 'littlewhale';

Postgres Run query from command line: *username is usually postgres psql -U username -d mydatabase -c 'SELECT * FROM mytable' This query below changes a users account with name super ALTER ROLE super WITH PASSWORD 'secret123';

################################################

###################################################

$rules_conf

# Generated by iptables-save v1.6.0 on Thu Dec 20 14:00:35 2018
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i eno1 -p tcp -m tcp --dport 666 -m state --state NEW -m recent --update --seconds 60 --hitcount 4 --name DEFAULT --mask 255.255.255.255 --rsource -j DROP
-A INPUT -i eno1 -p tcp -m tcp --dport 666 -m state --state NEW -m recent --set --name DEFAULT --mask 255.255.255.255 --rsource
COMMIT
# Completed on Thu Dec 20 14:00:35 2018

#############################################################
### General:

Always remember man pages

#### Package managers

Debian/Ubuntu = apt/apt-get
Metasploitable = apt-get
Red Hat/Cent-OS/Fedora/Amazon Linux = yum
Arch Linux = pacman

#### Basic IP Tables

#### Check Existing iptables

    iptables -L

##### Block Single IP address, all ports

    iptables -A INPUT -s <IP> -j DROP

##### Block Single IP address, single port

    iptables -A INPUT -s <IP> -p tcp --destination-port <portnumber>-j DROP

##### Block All Ports

    iptables -A INPUT -p tcp --destination-port <PORT> -j DROP

##### only drop port for given IP or Subnet

    iptables -A INPUT -i eth0 -p tcp --destination-port <PORT> -s {IP-ADDRESS-HERE} -j DROP

### Advanced IP Tables

#### How to notice red team

##### Look for strange processes

    htop

##### Look at security logs

    tail -f 
    /var/log/secure
    /var/log/messages
    /var/log/auth.log
    Netstat
    netstat -tulpna

#### New User Configuration files 
	
##### To add a new user

    useradd <username>
    adduser <username>

#### Configuration files for new users are located at /etc/skel and in /etc/adduser.conf

##### To make a sudo user

    usermod -a -G sudo <username>

##### How to change a password

##### Single user

    passwd <username>

##### Group

    passwd -g <groupname>
	
##### Lock Accounts:

#### Delete the user record from /etc/passwd	

##### Lock account and make it inaccessible

    passwd <username> -l -expiredate 1

#### Grep commands

##### Find String in all Files
   
   grep -rnw <pattern> <path>

#### Killing Processes

    kill -9 ${ ps aux| grep <process_name>}
    pkill <process_name>

#### System Commands

##### Sysvinit Command

##### Systemd Commands

###### Used to start a service (not reboot persistent)

    service frobozz start
    systemctl start frobozz
    
    
###### Used to stop a service (not reboot persistent)

    service frobozz stop
    systemctl stop frobozz
    
    
###### Used to stop and then start a service
    
    service frobozz restart
    systemctl restart frobozz


###### When supported, reloads the config file without interrupting pending operations.

service frobozz reload
systemctl reload frobozz


###### Restarts if the service is already running.

service frobozz condrestart
systemctl condrestart frobozz

###### Tells whether a service is currently running.

service frobozz status
systemctl status frobozz

ls /etc/rc.d/init.d/
systemctl (or) systemctl list-unit-files --type=service (or) 
ls /lib/systemd/system/*.service /etc/systemd/system/*.service
Used to list the services that can be started or stopped 
Used to list all the services and other units
chkconfig frobozz on
systemctl enable frobozz
Turn the service on, for start at next boot, or other trigger.
chkconfig frobozz off
systemctl disable frobozz
Turn the service off for the next reboot, or any other trigger.
chkconfig frobozz
systemctl is-enabled frobozz
Used to check whether a service is configured to start or not in the current environment.
chkconfig --list
systemctl list-unit-files --type=service (or) ls /etc/systemd/system/*.wants/
Print a table of services that lists which runlevels each is configured on or off
chkconfig --list | grep 5:on
systemctl list-dependencies graphical.target
Print a table of services that will be started when booting into graphical mode
chkconfig frobozz --list
ls /etc/systemd/system/*.wants/frobozz.service
Used to list what levels this service is configured on or off
chkconfig frobozz --add
systemctl daemon-reload
Used when you create a new service file or modify any configuration



How to deal with outdated machines

Set up Docker
Splunk (forwarder and local)
IDS
Look up Docker official stuff and Ubuntu (DigitalOcean in the folder)

Cobalt Strike

IDS:
Fail2ban
Psad
Bro && broctl
Suricata
Snrt
OSSec

Windows
inetpub folder (only with IIS)

sysmon (can recreate whole machine)

event logs (registry)

prefetch files

Network
Wireshark

Intrusion Detection System - Fireeye HX device

TCP Dump
	To print traffic between helios and either hot or ace:
tcpdump host helios and \( hot or ace \)


To print all IP packets between ace and any host except helios:
tcpdump ip host ace and not helios

Netcat (nc) - look at ports and banners

https://github.com/deadlift1226/linux-hardening/blob/master/nix_guide.md

###################################################

### CentOS

## Add user to wheel group (sudoers)
#usermod -aG wheel user

## Removing root account
#sudo passwd -ld root

## Install ModSecurity
sudo yum install mod_security mod_security_crs -y

####################################

###Ubuntu18

##Installing and Activating AppArmor
sudo apt-get install upgrade && update -yuf
sudo apt-get install apparmor-utils apparmor-profiles apparmor-profiles-extra -y
sudo systemctl enable apparmor
sudo systemctl start apparmor
sudo aa-enforce /etc/apparmor.d/*

##Installing and Activating ModSecurity
sudo apt-get install libapache2-mod-security2 -y
##Check if ModSecurity success (security2_modue (shared))
#sudo apachectl -M | grep --color security2
sudo mv /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf
##Reload Apache2
sudo service apache2 reload
##Turning on SecRuleEngine
sudo sed -i "s/SecRuleEngine DetectionOnly/SecRuleEngine On/" /etc/modsecurity/modsecurity.conf
##Replace ModSecurity folder with OWASP's modsecurity config
sudo apt-get install git
sudo mv /usr/share/modsecurity-crs /usr/share/modsecurity-crs.bk
sudo git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git /usr/share/modsecurity-crs
sudo cp /usr/share/modsecurity-crs/crs-setup.conf.example /usr/share/modsecurity-crs/crs-setup.conf
##Patch /etc/apache2/mods-enabled/security2.conf
##  Might have to clobber
#sudo patch -l security2.conf ~/security2.patch
##or
#sudo rm -rf /etc/apache2/mods-enabled/security2.conf
#sudo mv security2.conf /etc/apache2/mods-enabled/security2.conf
sudo systemctl restart apache2

##Patch sshd.config

##Check accounts for Empty passwords
sudo cat /etc/shadow | awk -F: '($2==""){print $1}' > ~/emptypasswords.txt

##Disable IPv6
sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
sudo sysctl -p



##Patch Network to 


########################################




###################################################

<IfModule security2_module>
	# Default Debian dir for modsecurity's persistent data
	SecDataDir /var/cache/modsecurity

	# Include all the *.conf files in /etc/modsecurity.
	# Keeping your local configuration in that directory
	# will allow for an easy upgrade of THIS file and
	# make your life easier
        IncludeOptional /etc/modsecurity/*.conf

	# Include OWASP ModSecurity CRS rules if installed
	IncludeOptional /usr/share/modsecurity-crs/owasp-crs.load
	IncludeOptional /usr/share/modsecurity-crs/*.conf
	IncludeOptional /usr/share/modsecurity-crs/rules/*.conf
</IfModule> 


########################################

Centos and ubuntu 

#!/bin/bash

hostnamectl
pstree -a 
service --status-all
ip addr
ss -taulpe
apt list --installed
w
last -xw
ip route | grep default
route -n
nstat
ss -s
iptables -L -n -v
nmap -sV -sS -v
nmap -sV -sU -v 
nmap -p 1-65535 -sV -sS -vv -T1
nmap -p 1-65535 -sV -sU -vv -T1

name=script_report
if [[ -e $name.txt ]] ; then
  i=0
  while [[ -e $name-$i.txt ]] ; do
    let i++
  done
  name=$name-$i
fi
touch "$name".txt

hostnamectl > "$name".txt
pstree -a >> "$name".txt
service --status-all >> "$name".txt
ip addr >> "$name".txt
ss -taulpe >> "$name".txt
apt list --installed >> "$name".txt
w >> "$name".txt
last -xw >> "$name".txt
ip route | grep default >> "$name".txt
route -n >> "$name".txt
nstat >> "$name".txt
ss -s >> "$name".txt
iptables -L -n -v >> "$name".txt
nmap -sV -sS -v >> "$name".txt
nmap -sV -sU -v  >> "$name".txt
nmap -p 1-65535 -sV -sS -vv -T1 >> "$name".txt
nmap -p 1-65535 -sV -sU -vv -T1 >> "$name".txt


###############################

Freebsd 



#!/bin/sh

uname -a
ps aux
service -l
ifconfig -a
sockstat -l
pkg info
w 
last -w
netstat -rn
nmap -sV -sS -v
nmap -sV -sU -v 
nmap -p 1-65535 -sV -sS -vv -T1
nmap -p 1-65535 -sV -sU -vv -T1

name=script_report
if [[ -e $name.txt ]] ; then
  i=0
  while [[ -e $name-$i.txt ]] ; do
    let i++
  done
  name=$name-$i
fi
touch "$name".txt

uname -a > "$name".txt
ps aux  >> "$name".txt
service -l  >> "$name".txt
ifconfig -a  >> "$name".txt
sockstat -l  >> "$name".txt
pkg info  >> "$name".txt
w  >> "$name".txt
last -w  >> "$name".txt
netstat -rn  >> "$name".txt
nmap -sV -sS -v >> "$name".txt
nmap -sV -sU -v >> "$name".txt
nmap -p 1-65535 -sV -sS -vv -T1 >> "$name".txt
nmap -p 1-65535 -sV -sU -vv -T1 >> "$name".txt


##################################################







